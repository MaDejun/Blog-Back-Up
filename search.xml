<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于compareTo(T o)方法的疑问]]></title>
    <url>%2F2020%2F01%2F11%2F%E5%85%B3%E4%BA%8EcompareTo(T%20o)%E6%96%B9%E6%B3%95%E7%9A%84%E7%96%91%E9%97%AE%2F</url>
    <content type="text"><![CDATA[疑问提出 在学习Comparable接口时，试了试书上的一个案例，案例要求是设计一个学生类，在此类中包含了姓名，年龄，成绩，并产生了一个对象数组，要求按成绩由高到低排序，若成绩相等，则按照年龄由低到高排序。解决这个问题的方法是借用Arrays类中的sort()方法进行排序操作。为了让排序满足题目要求，题目实现重写了compareTo()方法，那么在这个题目中，compareTo(Student stu)是怎么比较的呢？ 在这个方法体中的this.age不是指的当前对象的age吗？那它不应该和stu.age一样吗？compareTo方法的比较用的是什么算法？ 相关代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package cn.m.demo;import java.util.Arrays;import java.util.Comparator;import java.util.function.Consumer;class Student implements Comparable&lt;Student&gt;&#123; private int age; private String name; private float score; public Student(String name,int age,float score) &#123; this.name=name; this.age =age; this.score=score; &#125; public String toString() &#123; return this.name+&quot;\t\t&quot;+this.age+&quot;\t\t&quot;+this.score; &#125; @Override public int compareTo(Student stu) &#123; if(stu.score&gt;score) &#123; return 1; &#125;else if(stu.score&lt;this.score) &#123; return -1; &#125;else &#123; if(stu.age&gt;this.age) &#123; return 1; &#125;else if(stu.age&lt;this.age) &#123; return -1; &#125;else &#123; return 0; &#125; &#125; &#125; &#125;public class ArrayList1 &#123; public static void main(String[] args) &#123; Student[] student = new Student[]&#123;new Student(&quot;张三&quot;,17,70), new Student(&quot;李四&quot;,16,90), new Student(&quot;王二&quot;,20,65)&#125;; Arrays.sort(student); for(int i =0;i&lt;student.length;i++) &#123; System.out.println(student[i]); &#125; &#125;&#125;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java设计模式之单例模式]]></title>
    <url>%2F2018%2F09%2F17%2FJAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp; 单例模式含义 官方说法：单例模式属于创建型模式，这种模式涉及一个单一的例，该类负责创建自己的对象，同时确保只有单个对象呗创建，这个类提供了一种访问其唯一对象的方式——全局访问点，可以直接访问，不用实例化对象 解析：1.全局访问点实际就是一个全局变量。 通俗说法：如果对于一个班，那么这个班只能有一个班长；在电脑里，你可以打开很多个电脑画板的窗口，但是不能打开很多个任务管理器，不管你开了多少次，它的窗口只有一个，这就是单例。 特点 单例个类只有一个实例 该类必须自己创建自己的唯一实例 单例类必须给所有其他对象提供这一个实例，要提供给外部一个访问的节点，不能访问不到。 实现 创建一个单例类，里面有它的私有构造函数，目的是确保用户无法通过new关键字直接实例化它，和本身的一个静态私有成员。并提供一个公有的静态工厂方法，该工厂方法负责检验实例的存在性，并实例化自己，然后存储静态成员变量，以确保只有一个实例被创建。 实现方式 懒汉式 饿汉式 双检锁/双重校验锁 静态内部类 枚举 懒汉式与饿汉式的根本区别在与是否在类内方法外创建自己的对象。 使用场景 要求生产唯一序列号（工具类对象） WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来（频繁访问数据库或文件的对象） 创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等 内作业123456789101112131415161718192021222324252627282930313233343536package cn.mdj.test;class SingleTon&#123; private static SingleTon s=null; private static String name; public void setName(String name) &#123; this.name=name; &#125; public String getName() &#123; return name; &#125; private SingleTon() &#123; &#125; public static SingleTon Factory() &#123; if(s==null) &#123; s=new SingleTon(); &#125; return s; &#125;&#125;public class SingleTest &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub SingleTon st=SingleTon.Factory(); st.setName(&quot;大三&quot;); System.out.println(st.getName()+&quot;已经是我们班班长了&quot;); SingleTon st1=SingleTon.Factory(); st1.setName(&quot;大四&quot;); if(st1.equals(st)) &#123; System.out.println(&quot;已经有班长了，不能够让&quot;+st1.getName()+&quot;重复产生班长&quot;); &#125; &#125;&#125; 还在学习中，未完待续]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 反射机制]]></title>
    <url>%2F2018%2F09%2F15%2F%E5%88%9D%E8%AF%86JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[首先简单谈谈JAVA反射，动态语言的定义为什么要先说这个呢？因为在JAVA的反射机制里是这样定义的： 在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为JAVA语言的反射机制。 那么动态语言的定义是如何说的呢？ 程序运行时，允许改变程序结构或者变量类型，这种语言称为动态语言 一句题外话：对于动态和静态的区分，个人认为一个简单的方法就是看你的程序是在编写时会自动检查语法还是在运行时检查。比如JS，它在你编写的时候，如果有错误的话是不会报告语法错误的，它会在你运行时报错，而JAVA则会在你编写时检查并向你报告，前者就是动态语言，后者就是静态语言。 但是JAVA并不是动态语言，它是一种静态语言。所以JAVA在概念上是做不到这种动态特性的。但是上天给你关掉一扇窗，就会给你打开另一扇窗，所以JAVA自身就具备一种非常突出的动态相关机制—–JAVA的反射机制。 JAVA反射机制正好与我们平时通过类产生一个实例化对象这个次序反过来了，在机制里，我们是通过已知的对象，去利用机制找到相对应的类，并进行一系列相关操作。 JAVA反射机制到底扮演者什么样的角色？有什么用处 在运行时判断任意一个对象所属的类； 在运行时构造任意一个类的对象； 在运行时判断任意一个类所具有的成员变量和方法； 在运行时实现动态加载；在设计程序中，如果你有很多类，但是只要有一个类出现了错误你的整个程序就无法实现，这个时候，我们就可以利用反射机制去实现动态加载，用到哪一个类的时候就去加载那个类。Class.forName它不仅仅表示了类的类类型，还表示了动态加载类。 在框架中，通过反射运行配置文件内容，通过修改配置文件实现程序的修改，不会做到牵一发而动全身。 待补充 反射的步骤及接口步骤： 获取想要操作的类的Class对象 只有先为它产生一个Class对象，接下来才能经由后者唤起为数十多个的Reflection APIs。Reflection机制允许程序在正在执行的过程中，利用Reflection APIs取得任何已知名称的类的内部信息，包括：package、 type parameters、 superclass、 implemented interfaces、 inner classes、 outer classes、 fields、 constructors、 methods、 modifiers等，并可以在执行的过程中，动态生成instances、变更fields内容或唤起methods。 调用Class类中的方法 Constructor getConstructor(Class[] params)根据构造函数的参数，返回一个具体的具有public属性的构造函数 Constructor getDeclaredConstructor(Class[] params) 根据构造函数的参数，返回一个具体的构造函数（不分public和非public属性） Constructor getDeclaredConstructors() 返回该类中所有的构造函数数组（不分public和非public属性) Method getMethod(String name, Class[] params) 根据方法名和参数，返回一个具体的具有public属性的方法 Method[] getMethods() 返回所有具有public属性的方法数组 Method getDeclaredMethod(String name, Class[] params) 根据方法名和参数，返回一个具体的方法（不分public和非public属性） Method[] getDeclaredMethods() 返回该类中的所有的方法数组（不分public和非public属性） Field getField(String name) 根据变量名，返回一个具体的具有public属性的成员变量 Field[] getFields() 返回具有public属性的成员变量的数组 Field getDeclaredField(String name) 根据变量名，返回一个成员变量（不分public和非public属性） Field[] getDelcaredFields() 返回所有成员变量组成的数组（不分public和非public属性） 3. 使用反射API来操作这些信息接口： Class类：反射的核心类，可以获取类的属性，方法等信息。 Field类：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。 Method类： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。 Constructor类： Java.lang.reflec包中的类，表示类的构造方法。]]></content>
      <tags>
        <tag>Java  反射机制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 集合]]></title>
    <url>%2F2018%2F07%2F08%2FJava%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp; Java中的集合是为了解决存储不同类型值，虽然数组也可以用来存储，但是存储值的类型单一。所以为了保存一些数目不确定，类型任意，且长度可变的对象，JDK提供了这样的类，所有这样的类的统称————集合。 集合可分为两大类，一类是单列集合Collection，另一类是双列集合Map。 Colletion Collection接口是集合类的根接口，java中没有提供这个接口的直接的实现类。但是却因为被继承而产生了两个子接口。Set和List。 Set集合&nbsp;&nbsp;&nbsp;&nbsp;Set集合里面的元素可以重复，也可以是无序的。这里的无序指的是写入对象时的集合元素的顺序和你从集合中读出来的元素的顺序可能不一样。Set接口主要实现了两个类，分别是HashSet和TreeSet。（未完待续） List集合&nbsp;&nbsp;&nbsp;&nbsp;List集合中的元素是允许重复、有序的，这里的有序指的是存入顺序和取出的顺序是一样的。而且所有元素是以一种线性的结构存储的，其实个人觉得它和数组有点类似。都可以通过索引来访问指定的元素。List继承了Collection的所有方法。在List下还有三个List接口的实现类。分别是ArrayList、LinkedList、Vector。 在使用List集合时，通常情况下声明为List类型，实例化时根据实际情况的需要，实例化为ArrayList或LinkedList。ArrayList 实现了可变大小的数组。它允许所有元素，包括null。ArrayList没有同步。LinkedList实现了List接口，允许null元素。此外LinkedList提供额外的get，remove，insert方法在LinkedList的首部或尾部。这些操作使LinkedList可被用作堆栈，队列或双向队列。Vector非常类似ArrayList，但是Vector是同步的。Vector主要用在事先不知道数组的大小，或者只是需要一个可以改变大小的数组的情况，允许不同类型的元素。同时还实现了动态的数组，由Vector创建的Iterator(iterator是一个迭代器，个人认为其实他就是一个用来遍历集合的工具，使用时要先获得迭代器。与之相关的还有一个iterable。iterable里面实现了iterator，只要实现了iterable，就可以直接用iterator。）虽然Vector和ArrayList创建的Iterator是同一接口，但是，因为Vector是同步的，当一个Iterator被创建而且正在被使用，另一个线程改变了Vector的状态（例如，添加或删除了一些元素），这时调用Iterator的方法时将抛出ConcurrentModificationException，因此必须捕获该异常。12345678910111213141516171819202122232425262728 List &lt;String&gt; collection =new ArrayList&lt;String&gt;();collection.add(&quot;TOM&quot;);//void add()直接向集合中添加元素collection.add(&quot;Lorry&quot;);//void add()直接向集合中添加元素collection.add(&quot;KangKang&quot;);//void add()直接向集合中添加元素collection.add(&quot;Kathy&quot;);collection.add(&quot;Jam&quot;);collection.add(&quot;TOM&quot;);//void add()直接向集合中添加元素System.out.println(&quot;向集合中添加元素后：&quot;+collection);collection.add(&quot;&quot;);collection.add(1,&quot;MaDeJun&quot;);//void add(int index,Object element)在指定索引处添加某元素System.out.println(&quot;在索引1处插入元素后：&quot;+collection);collection.set(0, &quot;BOB&quot;);//Object set(int index,Object element)将索引index处元素替换成element对象System.out.println(&quot;将0处元素替换成BOB：&quot;+collection);Object obj=collection.get(5);System.out.println(&quot;返回索引值5处的元素值：&quot;+obj);int index=collection.indexOf(&quot;MaDeJun&quot;);System.out.println(&quot;返回元素MaDeJune出现的位置：&quot;+index);int index1=collection.lastIndexOf(&quot;TOM&quot;);System.out.println(&quot;返回元素TOM最后一次出现的位置：&quot;+index1);List childrenlist=collection.subList(1, 4);System.out.println(&quot;返回从1到4处所组成的子集合：&quot;+childrenlist);collection.remove(&quot;Jam&quot;);System.out.println(&quot;删除Jam后集合：&quot;+collection);List&lt;String&gt; c=new ArrayList&lt;String&gt;();c.add(&quot;c_1&quot;);c.add(&quot;c_2&quot;);collection.addAll(c);System.out.println(&quot;把集合c添加到collection中后：&quot;+collection); &nbsp;&nbsp; 下面是使用iterator遍历collection这个集合的方法：首先获得集合的迭代器：Iterator it=List.iterator;其次使用hasNext（）函数判断集合是否有值；最后使用next（）函数返回迭代中的下一个元素。12345Iterator it=collection.iterator(); while(it.hasNext())&#123; Object objc=it.next(); System.out.println(objc); &#125; &nbsp;&nbsp;]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo日常折腾—添加相册功能]]></title>
    <url>%2F2017%2F11%2F20%2FHexo%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE%E2%80%94%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[虽然搭建博客主要是为了记录自己兴趣爱好的学习经验和偶尔的日常小生活，但有个相册的功能也没有多大的违背搭建博客的初愿。 效果: 看这里说明:如果你会前端，可以自行改一下样式。 功能实现1.首先你要找一个可以存储图片的地方，如果你用github，最好新建一个仓库用于存储图片，可以访问到的。不要在博客的仓库上存储，这样会拖累它的速度的。例如我新建的仓库名叫Blog-Back-Up,当然你也可以用七牛 2.要生成photos.html来展示自己的图片。也要向这个页面提供图片的数据，这些数据的来源就需要一些文件来生成一个.json (里面有图片的信息)文件。 2.1本地目录里的设置 2.1.1 进入到你的博客目录下生成photos页面 执行”hexo new page “photos” “ 2.1.2 可以在lawlite 19这里下载样式文件，将这些文件放到你刚刚新建的/source/photos文件夹里。 然后在博客的根目录下新建photos和min_photos两个文件夹，photos用来存放你要上传的照片，min_photos文件夹不需要你去处理什么 里面会在你执行脚本的时候自动将处理后的图片放进去。 修改ins.js文件里面的rend函数下的url前面一定是raw.githubusercontent.com 2.1.3 这一步就该处理图片了，处理图片所用到的python脚本文件你可以到这里下载 下载后放到你的博客根目录下，将你要上传的图片放到photos文件夹里，并且将图片重命名为一下格式最前面是日期，然后用下划线进行分隔后面是图片的描述信息，注意不要包含_和.符号 通过命令窗口进入到tool.py所在的目录执行tool.py脚本，执行结束后，你就会在/source/photos文件里看到一个data.json文件。 最后 hexo ghexo s预览一下 成功后就可以hexo d部署到博客上了]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[冬]]></title>
    <url>%2F2017%2F11%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[请输入密码 解密 ]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
