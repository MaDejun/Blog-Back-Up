<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MaDejun</title>
  
  <subtitle>何以解忧 唯有暴富</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.madejun.top/"/>
  <updated>2018-09-17T14:31:32.905Z</updated>
  <id>https://www.madejun.top/</id>
  
  <author>
    <name>Yolo-m</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式之单例模式</title>
    <link href="https://www.madejun.top/2018/09/17/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.madejun.top/2018/09/17/JAVA设计模式之单例模式/</id>
    <published>2018-09-17T14:16:14.350Z</published>
    <updated>2018-09-17T14:31:32.905Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><img width="100%" src="https://coding.net/u/MaDejun/p/MaDejun/git/raw/master/photos/IMG_2351.JPG"></div><p>&nbsp;&nbsp;<font color="White"></font></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><ul><li>官方说法：单例模式属于创建型模式，这种模式涉及一个单一的例，该类负责创建自己的对象，同时确保只有单个对象呗创建，这个类提供了一种访问其唯一对象的方式——全局访问点，可以直接访问，不用实例化对象</li></ul><blockquote><blockquote><p>解析：1.全局访问点实际就是一个全局变量。</p></blockquote></blockquote><a id="more"></a><ul><li>通俗说法：如果对于一个班，那么这个班只能有一个班长；在电脑里，你可以打开很多个电脑画板的窗口，但是不能打开很多个任务管理器，不管你开了多少次，它的窗口只有一个，这就是单例。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>单例个类只有一个实例</li><li>该类必须自己创建自己的唯一实例</li><li>单例类必须给所有其他对象提供这一个实例，要提供给外部一个访问的节点，不能访问不到。</li></ul><p><img src="https://coding.net/u/MaDejun/p/MaDejun/git/raw/master/photos/singleton.jpg" alt="单例模式实现原理"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><blockquote><p>创建一个单例类，里面有它的<strong>私有构造函数</strong>，目的是确保用户无法通过new关键字直接实例化它，和本身的一个<strong>静态私有成员</strong>。并提供一个<strong>公有的静态工厂方法</strong>，该工厂方法负责检验实例的存在性，并实例化自己，然后存储静态成员变量，以确保只有一个实例被创建。</p></blockquote><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul><li>懒汉式 </li><li>饿汉式</li><li>双检锁/双重校验锁</li><li>静态内部类</li><li>枚举<blockquote><blockquote><p>懒汉式与饿汉式的根本区别在与是否在类内方法外创建自己的对象。</p></blockquote></blockquote></li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>要求生产唯一序列号（工具类对象）</p></li><li><p>WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来（频繁访问数据库或文件的对象）</p></li><li><p>创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等</p></li></ol><h3 id="内作业"><a href="#内作业" class="headerlink" title="内作业"></a>内作业</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package cn.mdj.test;</span><br><span class="line">class SingleTon&#123;</span><br><span class="line">private static SingleTon s=null;</span><br><span class="line">private static String name;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">&#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">    return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private SingleTon() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static SingleTon Factory() &#123;</span><br><span class="line">if(s==null) &#123;</span><br><span class="line">s=new SingleTon();</span><br><span class="line">&#125;</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public  class SingleTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">   SingleTon st=SingleTon.Factory();</span><br><span class="line">   st.setName(&quot;大三&quot;);</span><br><span class="line">   System.out.println(st.getName()+&quot;已经是我们班班长了&quot;);</span><br><span class="line">   SingleTon st1=SingleTon.Factory();</span><br><span class="line">   st1.setName(&quot;大四&quot;);</span><br><span class="line">   if(st1.equals(st)) &#123;</span><br><span class="line">   System.out.println(&quot;已经有班长了，不能够让&quot;+st1.getName()+&quot;重复产生班长&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="还在学习中，未完待续"><a href="#还在学习中，未完待续" class="headerlink" title="还在学习中，未完待续"></a>还在学习中，未完待续</h2>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;https://coding.net/u/MaDejun/p/MaDejun/git/raw/master/photos/IMG_2351.JPG&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;font color=&quot;White&quot;&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;h3 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; title=&quot;含义&quot;&gt;&lt;/a&gt;含义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;官方说法：单例模式属于创建型模式，这种模式涉及一个单一的例，该类负责创建自己的对象，同时确保只有单个对象呗创建，这个类提供了一种访问其唯一对象的方式——全局访问点，可以直接访问，不用实例化对象&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;解析：1.全局访问点实际就是一个全局变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.madejun.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射机制</title>
    <link href="https://www.madejun.top/2018/09/15/%E5%88%9D%E8%AF%86JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://www.madejun.top/2018/09/15/初识JAVA反射机制/</id>
    <published>2018-09-15T12:42:44.002Z</published>
    <updated>2018-09-17T05:42:07.256Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><img width="100%" src="https://coding.net/u/MaDejun/p/MaDejun/git/raw/master/photos/IMG_2349.JPG"></div><h2 id="首先简单谈谈JAVA反射，动态语言的定义"><a href="#首先简单谈谈JAVA反射，动态语言的定义" class="headerlink" title="首先简单谈谈JAVA反射，动态语言的定义"></a>首先简单谈谈JAVA反射，动态语言的定义</h2><p>为什么要先说这个呢？因为在JAVA的反射机制里是这样定义的：</p><blockquote><p>在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为JAVA语言的反射机制。       </p></blockquote><a id="more"></a><p>那么动态语言的定义是如何说的呢？</p><blockquote><p>程序运行时，允许改变程序结构或者变量类型，这种语言称为动态语言</p></blockquote><p>一句题外话：对于动态和静态的区分，个人认为一个简单的方法就是看你的程序是在编写时会自动检查语法还是在运行时检查。比如JS，它在你编写的时候，如果有错误的话是不会报告语法错误的，它会在你运行时报错，而JAVA则会在你编写时检查并向你报告，前者就是动态语言，后者就是静态语言。</p><p>但是JAVA并不是动态语言，它是一种静态语言。所以JAVA在概念上是做不到这种动态特性的。但是上天给你关掉一扇窗，就会给你打开另一扇窗，所以JAVA自身就具备一种非常突出的动态相关机制—–JAVA的反射机制。</p><p>JAVA反射机制正好与我们平时通过类产生一个实例化对象这个次序反过来了，在机制里，我们是通过已知的对象，去利用机制找到相对应的类，并进行一系列相关操作。</p><h2 id="JAVA反射机制到底扮演者什么样的角色？有什么用处"><a href="#JAVA反射机制到底扮演者什么样的角色？有什么用处" class="headerlink" title="JAVA反射机制到底扮演者什么样的角色？有什么用处"></a>JAVA反射机制到底扮演者什么样的角色？有什么用处</h2><ul><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法；</li><li>在运行时实现动态加载；在设计程序中，如果你有很多类，但是只要有一个类出现了错误你的整个程序就无法实现，这个时候，我们就可以利用反射机制去实现动态加载，用到哪一个类的时候就去加载那个类。Class.forName它不仅仅表示了类的类类型，还表示了动态加载类。</li><li>在框架中，通过反射运行配置文件内容，通过修改配置文件实现程序的修改，不会做到牵一发而动全身。</li><li>待补充</li></ul><h2 id="反射的步骤及接口"><a href="#反射的步骤及接口" class="headerlink" title="反射的步骤及接口"></a>反射的步骤及接口</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>获取想要操作的类的Class对象<blockquote><p>只有先为它产生一个Class对象，接下来才能经由后者唤起为数十多个的Reflection APIs。Reflection机制允许程序在正在执行的过程中，利用Reflection APIs取得任何已知名称的类的内部信息，包括：package、 type parameters、 superclass、 implemented interfaces、 inner classes、 outer classes、 fields、 constructors、 methods、 modifiers等，并可以在执行的过程中，动态生成instances、变更fields内容或唤起methods。<br><img src="https://raw.githubusercontent.com/MaDejun/MaDejun.github.io/master/photos/class.png" alt="获取Class对象的三大方法"></p></blockquote></li><li>调用Class类中的方法</li></ol><blockquote><p>Constructor getConstructor(Class[] params)根据构造函数的参数，返回一个具体的具有public属性的构造函数<br>  Constructor getDeclaredConstructor(Class[] params)     根据构造函数的参数，返回一个具体的构造函数（不分public和非public属性）<br>  Constructor getDeclaredConstructors()    返回该类中所有的构造函数数组（不分public和非public属性)</p></blockquote><hr><blockquote><p>Method getMethod(String name, Class[] params) 根据方法名和参数，返回一个具体的具有public属性的方法<br>  Method[] getMethods() 返回所有具有public属性的方法数组<br>  Method getDeclaredMethod(String name, Class[] params)  根据方法名和参数，返回一个具体的方法（不分public和非public属性）<br>  Method[] getDeclaredMethods() 返回该类中的所有的方法数组（不分public和非public属性）</p></blockquote><hr><blockquote><p>Field getField(String name)  根据变量名，返回一个具体的具有public属性的成员变量<br>   Field[] getFields()  返回具有public属性的成员变量的数组<br>   Field getDeclaredField(String name) 根据变量名，返回一个成员变量（不分public和非public属性）<br>   Field[] getDelcaredFields() 返回所有成员变量组成的数组（不分public和非public属性）</p></blockquote><h2 id="3-使用反射API来操作这些信息"><a href="#3-使用反射API来操作这些信息" class="headerlink" title="3. 使用反射API来操作这些信息"></a>3. 使用反射API来操作这些信息</h2><h3 id="接口："><a href="#接口：" class="headerlink" title="接口："></a>接口：</h3><ul><li>Class类：反射的核心类，可以获取类的属性，方法等信息。 </li><li>Field类：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。 </li><li>Method类： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。 </li><li>Constructor类： Java.lang.reflec包中的类，表示类的构造方法。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;https://coding.net/u/MaDejun/p/MaDejun/git/raw/master/photos/IMG_2349.JPG&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;首先简单谈谈JAVA反射，动态语言的定义&quot;&gt;&lt;a href=&quot;#首先简单谈谈JAVA反射，动态语言的定义&quot; class=&quot;headerlink&quot; title=&quot;首先简单谈谈JAVA反射，动态语言的定义&quot;&gt;&lt;/a&gt;首先简单谈谈JAVA反射，动态语言的定义&lt;/h2&gt;&lt;p&gt;为什么要先说这个呢？因为在JAVA的反射机制里是这样定义的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为JAVA语言的反射机制。       &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java  反射机制" scheme="https://www.madejun.top/tags/Java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合</title>
    <link href="https://www.madejun.top/2018/07/08/Java%E9%9B%86%E5%90%88/"/>
    <id>https://www.madejun.top/2018/07/08/Java集合/</id>
    <published>2018-07-08T15:39:05.104Z</published>
    <updated>2018-09-17T13:20:43.120Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><img width="100%" src="https://coding.net/u/MaDejun/p/MaDejun/git/raw/master/photos/IMG_2346.JPG"></div><p>&nbsp;&nbsp;<font color="White"><br>    Java中的集合是为了解决存储不同类型值，虽然数组也可以用来存储，但是存储值的类型单一。所以为了保存一些<font color="lightblue"><strong>数目不确定，类型任意，且长度可变</strong></font>的对象，JDK提供了这样的类，所有这样的类的统称————<font color="lightblue"><strong>集合</strong></font>。 集合可分为两大类，<font color="lightblue">一类是单列集合<em>Collection</em>，另一类是双列集合<em>Map</em></font>。<br>    <a id="more"></a></font></p><h2 id="Colletion"><a href="#Colletion" class="headerlink" title="Colletion"></a>Colletion</h2><blockquote><p>Collection接口是集合类的根接口，java中没有提供这个接口的直接的实现类。但是却因为被继承而产生了两个子接口。Set和List。 </p></blockquote><h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Set集合里面的元素可以重复，也可以是无序的。这里的无序指的是写入对象时的集合元素的顺序和你从集合中读出来的元素的顺序可能不一样。Set接口主要实现了两个类，分别是HashSet和TreeSet。（未完待续）</p><h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;List集合中的元素是允许重复、有序的，这里的有序指的是存入顺序和取出的顺序是一样的。而且所有元素是以一种线性的结构存储的，其实个人觉得它和数组有点类似。都可以通过索引来访问指定的元素。List继承了Collection的所有方法。在List下还有三个List接口的实现类。分别是ArrayList、LinkedList、Vector。<font color="lightblue"> <em>在使用List集合时，通常情况下声明为List类型，实例化时根据实际情况的需要，实例化为ArrayList或LinkedList</em></font>。<strong>ArrayList</strong> 实现了可变大小的数组。它允许所有元素，包括null。ArrayList没有同步。<strong>LinkedList</strong>实现了List接口，允许null元素。此外LinkedList提供额外的get，remove，insert方法在LinkedList的首部或尾部。这些操作使LinkedList可被用作堆栈，队列或双向队列。<strong>Vector</strong>非常类似ArrayList，但是Vector是同步的。Vector主要用在事先不知道数组的大小，或者只是需要一个可以改变大小的数组的情况，允许不同类型的元素。同时还实现了动态的数组，由Vector创建的Iterator(iterator是一个迭代器，个人认为其实他就是一个用来遍历集合的工具，使用时要先获得迭代器。与之相关的还有一个iterable。iterable里面实现了iterator，只要实现了iterable，就可以直接用iterator。）虽然Vector和ArrayList创建的Iterator是同一接口，但是，因为Vector是同步的，当一个Iterator被创建而且正在被使用，另一个线程改变了Vector的状态（例如，添加或删除了一些元素），这时调用Iterator的方法时将抛出ConcurrentModificationException，因此必须捕获该异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">      List &lt;String&gt; collection =new ArrayList&lt;String&gt;();</span><br><span class="line">collection.add(&quot;TOM&quot;);//void add()直接向集合中添加元素</span><br><span class="line">collection.add(&quot;Lorry&quot;);//void add()直接向集合中添加元素</span><br><span class="line">collection.add(&quot;KangKang&quot;);//void add()直接向集合中添加元素</span><br><span class="line">collection.add(&quot;Kathy&quot;);</span><br><span class="line">collection.add(&quot;Jam&quot;);</span><br><span class="line">collection.add(&quot;TOM&quot;);//void add()直接向集合中添加元素</span><br><span class="line">System.out.println(&quot;向集合中添加元素后：&quot;+collection);</span><br><span class="line">collection.add(&quot;&quot;);</span><br><span class="line">collection.add(1,&quot;MaDeJun&quot;);//void add(int index,Object element)在指定索引处添加某元素</span><br><span class="line">System.out.println(&quot;在索引1处插入元素后：&quot;+collection);</span><br><span class="line">collection.set(0, &quot;BOB&quot;);//Object set(int index,Object element)将索引index处元素替换成element对象</span><br><span class="line">System.out.println(&quot;将0处元素替换成BOB：&quot;+collection);</span><br><span class="line">Object obj=collection.get(5);</span><br><span class="line">System.out.println(&quot;返回索引值5处的元素值：&quot;+obj);</span><br><span class="line">int index=collection.indexOf(&quot;MaDeJun&quot;);</span><br><span class="line">System.out.println(&quot;返回元素MaDeJune出现的位置：&quot;+index);</span><br><span class="line">int index1=collection.lastIndexOf(&quot;TOM&quot;);</span><br><span class="line">System.out.println(&quot;返回元素TOM最后一次出现的位置：&quot;+index1);</span><br><span class="line">List childrenlist=collection.subList(1, 4);</span><br><span class="line">System.out.println(&quot;返回从1到4处所组成的子集合：&quot;+childrenlist);</span><br><span class="line">collection.remove(&quot;Jam&quot;);</span><br><span class="line">System.out.println(&quot;删除Jam后集合：&quot;+collection);</span><br><span class="line">List&lt;String&gt; c=new ArrayList&lt;String&gt;();</span><br><span class="line">c.add(&quot;c_1&quot;);</span><br><span class="line">c.add(&quot;c_2&quot;);</span><br><span class="line">collection.addAll(c);</span><br><span class="line">System.out.println(&quot;把集合c添加到collection中后：&quot;+collection);</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;<img src="https://raw.githubusercontent.com/MaDejun/MaDejun.github.io/master/photos/list.png" alt="方法运行结果"></p><p>下面是使用iterator遍历collection这个集合的方法：<br>首先获得集合的迭代器：Iterator it=List.iterator;<br>其次使用hasNext（）函数判断集合是否有值；<br>最后使用next（）函数返回迭代中的下一个元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator it=collection.iterator();</span><br><span class="line">while(it.hasNext())&#123;</span><br><span class="line"> Object objc=it.next();</span><br><span class="line"> System.out.println(objc);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;<img src="https://raw.githubusercontent.com/MaDejun/MaDejun.github.io/master/%E8%BF%AD%E4%BB%A3.png" alt="方法运行结果"></p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;https://coding.net/u/MaDejun/p/MaDejun/git/raw/master/photos/IMG_2346.JPG&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;font color=&quot;White&quot;&gt;&lt;br&gt;    Java中的集合是为了解决存储不同类型值，虽然数组也可以用来存储，但是存储值的类型单一。所以为了保存一些&lt;font color=&quot;lightblue&quot;&gt;&lt;strong&gt;数目不确定，类型任意，且长度可变&lt;/strong&gt;&lt;/font&gt;的对象，JDK提供了这样的类，所有这样的类的统称————&lt;font color=&quot;lightblue&quot;&gt;&lt;strong&gt;集合&lt;/strong&gt;&lt;/font&gt;。 集合可分为两大类，&lt;font color=&quot;lightblue&quot;&gt;一类是单列集合&lt;em&gt;Collection&lt;/em&gt;，另一类是双列集合&lt;em&gt;Map&lt;/em&gt;&lt;/font&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.madejun.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo日常折腾—添加相册功能</title>
    <link href="https://www.madejun.top/2017/11/20/Hexo%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE%E2%80%94%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
    <id>https://www.madejun.top/2017/11/20/Hexo日常折腾—添加相册功能/</id>
    <published>2017-11-20T12:00:00.000Z</published>
    <updated>2018-09-17T05:19:23.864Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><img width="100%" src="https://raw.githubusercontent.com/MaDejun/MaDejun.github.io/master/photos/IMG_2327.JPG"></div><blockquote><p>虽然搭建博客主要是为了记录自己兴趣爱好的学习经验和偶尔的日常小生活，但有个相册的功能也没有多大的违背搭建博客的初愿。</p></blockquote><p>效果: <a href="http://www.madejun.top/photos">看这里</a><br>说明:如果你会前端，可以自行改一下样式。<br><a id="more"></a></p><h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><p>1.首先你要找一个可以存储图片的地方，如果你用github，最好新建一个仓库用于存储图片，可以访问到的。不要在博客的仓库上存储，这样会拖累它的速度的。例如我新建的仓库名叫Blog-Back-Up,当然你也可以用七牛<br><img src="http://upload-images.jianshu.io/upload_images/3709167-ca59dcea4fe5b7b2.jpg" alt=""></p><p>2.要生成photos.html来展示自己的图片。也要向这个页面提供图片的数据，这些数据的来源就需要一些文件来生成一个.json (里面有图片的信息)文件。</p><blockquote><p>2.1本地目录里的设置 </p></blockquote><p>2.1.1 进入到你的博客目录下生成photos页面 执行”hexo new page “photos” “<br><img src="http://upload-images.jianshu.io/upload_images/3709167-db7ea608d983e27e.jpg" alt="图片发自简书App"></p><p>2.1.2 可以在<a href="https://github.com/lawlite19/Blog-Back-Up/tree/master/blog_photos_copy" target="_blank" rel="noopener">lawlite 19</a>这里下载样式文件，将这些文件放到你刚刚新建的/source/photos文件夹里。<br><img src="http://upload-images.jianshu.io/upload_images/3709167-457ebfda1c25aa61.jpg" alt=""></p><p>然后在博客的根目录下新建photos和min_photos两个文件夹，photos用来存放你要上传的照片，min_photos文件夹不需要你去处理什么 里面会在你执行脚本的时候自动将处理后的图片放进去。</p><p>修改ins.js文件里面的rend函数下的url<br><img src="http://upload-images.jianshu.io/upload_images/3709167-4bab308a9ede818a.jpg" alt=""><br><strong>前面一定是raw.githubusercontent.com</strong></p><p>2.1.3 这一步就该处理图片了，处理图片所用到的<strong>python脚本文件</strong>你可以到<a href="https://github.com/lawlite19/Blog-Back-Up" target="_blank" rel="noopener">这里</a>下载</p><p>下载后放到你的博客根目录下，将你要上传的图片放到photos文件夹里，并且将图片重命名为一下格式<br><strong>最前面是日期，然后用下划线进行分隔<br>后面是图片的描述信息，注意不要包含_和.符号</strong><br><img src="http://upload-images.jianshu.io/upload_images/3709167-7b2fc4778b9aed09.jpg" alt=""></p><p>通过命令窗口进入到tool.py所在的目录执行tool.py脚本，执行结束后，你就会在/source/photos文件里看到一个data.json文件。</p><p>最后</p><p>hexo g<br>hexo s<br>预览一下 成功后就可以hexo d部署到博客上了</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/MaDejun/MaDejun.github.io/master/photos/IMG_2327.JPG&quot;&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;虽然搭建博客主要是为了记录自己兴趣爱好的学习经验和偶尔的日常小生活，但有个相册的功能也没有多大的违背搭建博客的初愿。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果: &lt;a href=&quot;http://www.madejun.top/photos&quot;&gt;看这里&lt;/a&gt;&lt;br&gt;说明:如果你会前端，可以自行改一下样式。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://www.madejun.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="hexo" scheme="https://www.madejun.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>冬</title>
    <link href="https://www.madejun.top/2017/11/20/hello-world/"/>
    <id>https://www.madejun.top/2017/11/20/hello-world/</id>
    <published>2017-11-20T11:49:55.413Z</published>
    <updated>2017-11-20T11:49:55.414Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"><div> <div class="input-group"> <input type="text" class="form-control" aria-label="请输入密码" id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">解密</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      文章访问受限制 请输入密码后访问
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.madejun.top/tags/hexo/"/>
    
  </entry>
  
</feed>
